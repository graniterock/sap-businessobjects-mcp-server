#!/usr/bin/env python3
"""
FastMCP Usage Examples for SAP BusinessObjects Administration

This script demonstrates how to use the FastMCP-powered SAP BusinessObjects server
with various enterprise features including authentication, session management,
and advanced operations.
"""

import asyncio
import os
from typing import List, Dict, Any

from fastmcp import FastMCP, Context
from src.fastmcp_server import SAPBusinessObjectsFastMCPServer


async def example_basic_operations():
    """Demonstrate basic FastMCP operations without authentication."""
    print("🚀 Basic FastMCP Operations Example")
    print("=" * 50)

    # Create development server (no auth)
    server = SAPBusinessObjectsFastMCPServer(enable_auth=False)

    # Example 1: List user permissions
    print("\n📋 Example 1: List User Permissions")
    try:
        # In real usage, this would be called by Claude/MCP client
        # Here we simulate the call for demonstration
        result = await server.mcp.call_tool(
            "list_user_permissions",
            username="john.doe",
            include_groups=True
        )
        print(f"✅ Result: {result[:200]}...")
    except Exception as e:
        print(f"❌ Error: {e}")

    # Example 2: Manage email list (dry run)
    print("\n📧 Example 2: Manage Email List (Dry Run)")
    try:
        result = await server.mcp.call_tool(
            "manage_report_mailing_list",
            report_name="Monthly Sales Report",
            action="add",
            email_addresses=["newuser@company.com"],
            dry_run=True
        )
        print(f"✅ Dry run result: {result[:200]}...")
    except Exception as e:
        print(f"❌ Error: {e}")


async def example_with_context():
    """Demonstrate context-aware operations with progress reporting."""
    print("\n🔄 Context-Aware Operations Example")
    print("=" * 50)

    # Mock context for demonstration
    class MockContext:
        async def info(self, message: str):
            print(f"📝 INFO: {message}")

        async def error(self, message: str):
            print(f"❌ ERROR: {message}")

        async def report_progress(self, current: int, total: int, message: str):
            percentage = (current / total) * 100 if total > 0 else 0
            print(f"📊 PROGRESS: {percentage:.1f}% - {message}")

    ctx = MockContext()

    # Simulate context-aware operation
    print("\n🔍 Simulating permission copy with progress tracking:")
    await ctx.info("Starting permission copy operation")
    await ctx.report_progress(0, 3, "Initializing")

    await ctx.info("Copying permissions for user 1")
    await ctx.report_progress(1, 3, "Processing user 1")

    await ctx.info("Copying permissions for user 2")
    await ctx.report_progress(2, 3, "Processing user 2")

    await ctx.info("Copying permissions for user 3")
    await ctx.report_progress(3, 3, "Complete")

    print("✅ Context-aware operation completed!")


async def example_resource_access():
    """Demonstrate resource endpoints for monitoring."""
    print("\n📊 Resource Access Example")
    print("=" * 50)

    server = SAPBusinessObjectsFastMCPServer(enable_auth=False)

    # Example connection status resource
    print("\n🔗 SAP BO Connection Status:")
    try:
        # Simulate resource access
        status = {
            "server_url": "http://demo-sap-bo:6405",
            "cms_name": "demo-cms",
            "connection_status": {
                "connected": True,
                "authenticated": True,
                "server_info": {
                    "version": "4.3 SP02",
                    "uptime": "5 days"
                }
            },
            "readonly_mode": False,
            "audit_enabled": True
        }
        print(f"✅ Status: {status}")
    except Exception as e:
        print(f"❌ Error accessing resource: {e}")


async def example_strategic_prompt():
    """Demonstrate strategic AI prompt generation."""
    print("\n🧠 Strategic AI Prompt Example")
    print("=" * 50)

    # Example prompt for complex administration task
    task_description = "Onboard 5 new employees by copying permissions from their manager"
    safety_level = "standard"

    print(f"📝 Task: {task_description}")
    print(f"🛡️ Safety Level: {safety_level}")

    # Mock strategic prompt (normally generated by the @mcp.prompt decorator)
    strategic_prompt = f"""
🎯 SAP BusinessObjects Administration Strategy

**Task**: {task_description}
**Safety Mode**: Use dry_run for bulk operations, apply single changes directly with confirmation

**Recommended Workflow**:
1. **Assess Current State**
   - Use `list_user_permissions` to analyze manager's permissions
   - Identify which groups and direct permissions to copy

2. **Plan the Operation**
   - Use `copy_user_permissions` with dry_run=true first
   - Review the planned changes for each new employee

3. **Execute Safely**
   - Apply `copy_user_permissions` for each employee
   - Monitor progress through session context
   - Verify results with `list_user_permissions`

4. **Audit and Verify**
   - Check that all new employees have correct access
   - Document the changes in audit logs
   - Test access to ensure functionality

**Enterprise Considerations**:
- Maintain audit trail for compliance
- Use session context for progress monitoring
- Consider impact on customer-facing reports
- Verify manager permissions are current and appropriate
"""

    print("🎯 Generated Strategic Prompt:")
    print(strategic_prompt)


async def example_bulk_operations():
    """Demonstrate bulk operations with safety checks."""
    print("\n📦 Bulk Operations Example")
    print("=" * 50)

    # Example bulk email list updates
    bulk_updates = [
        {
            "report_name": "Monthly Sales Report",
            "action": "add",
            "email_addresses": ["newuser1@company.com", "newuser2@company.com"]
        },
        {
            "report_name": "Weekly Operations Report",
            "action": "remove",
            "email_addresses": ["olduser@company.com"]
        },
        {
            "report_name": "Customer Satisfaction Dashboard",
            "action": "add",
            "email_addresses": ["executive@company.com"]
        }
    ]

    print(f"📋 Bulk updates planned: {len(bulk_updates)} operations")
    for i, update in enumerate(bulk_updates, 1):
        print(f"  {i}. {update['action'].upper()} {len(update['email_addresses'])} emails for '{update['report_name']}'")

    print("\n🔍 Simulating bulk operation with dry run:")
    print("✅ All operations validated successfully")
    print("📊 Estimated impact: 3 reports, 4 email addresses affected")
    print("⏱️ Estimated completion time: 45 seconds")


async def example_error_handling():
    """Demonstrate enterprise error handling."""
    print("\n🛡️ Error Handling Example")
    print("=" * 50)

    print("🔍 Simulating various error scenarios:")

    # Authentication error
    print("\n1. Authentication Error:")
    print("❌ ERROR: Failed to authenticate with SAP BusinessObjects server")
    print("💡 MASKED: Internal connection details hidden for security")

    # Validation error
    print("\n2. Input Validation Error:")
    print("❌ ERROR: Invalid email format: 'not-an-email'")
    print("💡 VISIBLE: Client-safe validation message")

    # Rate limit error
    print("\n3. Rate Limit Error:")
    print("❌ ERROR: Too many requests. Please wait 60 seconds before retrying.")
    print("💡 SECURITY: Rate limiting protects against abuse")

    # Resource not found
    print("\n4. Resource Not Found:")
    print("❌ ERROR: User 'nonexistent.user' not found")
    print("💡 SAFE: No sensitive information leaked")


async def main():
    """Run all FastMCP examples."""
    print("🚀 SAP BusinessObjects FastMCP Examples")
    print("=" * 60)
    print("This script demonstrates FastMCP enterprise features")
    print("for SAP BusinessObjects administration.")
    print("=" * 60)

    # Run examples
    await example_basic_operations()
    await example_with_context()
    await example_resource_access()
    await example_strategic_prompt()
    await example_bulk_operations()
    await example_error_handling()

    print("\n🎉 All examples completed!")
    print("\n📚 Next Steps:")
    print("1. Install FastMCP: pip install fastmcp>=2.0.0")
    print("2. Configure authentication (see docs/FASTMCP_DEPLOYMENT.md)")
    print("3. Start your server: python src/fastmcp_server.py")
    print("4. Connect with Claude or other MCP clients")


if __name__ == "__main__":
    # Run examples
    asyncio.run(main())